# python main.py --config-path="dataset_configs/arabic/youtube/" --config-name="config_MSA.yaml"
processors_to_run: "0:"

split: clean_train # specify dataset type (clean_train, clean_test, ...)
dataset_dir: /home/lgrigoryan/datasets/arab/
workspace_dir: /home/lgrigoryan/prog/asr_commonvoice_finetuning/NeMo-speech-data-processor/workdir/msa

min_duration: 5 # minimal duration of the segment
max_duration: 20.0 # maximal duration of the segment

processors:
  # 0 creating manifest {sample_id, audio_path}
  - _target_: sdp.processors.CreateInitialManifestByExtByCsv
    dataset_dir: ${dataset_dir}/audios
    csv_file_path: ${dataset_dir}/subsets/${split}.csv
    csv_primary_key: video_id
    extension: wav
    save_sample_ids: True
    output_manifest_sample_id_key: sample_id
    output_manifest_result_path_key: raw_audio_file_path
    output_manifest_file: ${workspace_dir}/manifest0.json
    filter_key: dialect
    filter_value: MSA

   # 1 resampling audios to the same sample rate
  - _target_: sdp.processors.FfmpegConvert
    resampled_audio_dir: ${workspace_dir}/wav
    target_samplerate: 16000
    target_nchannels: 1
    input_file_key: raw_audio_file_path
    output_file_key: audio_file_path
    output_manifest_file: ${workspace_dir}/manifest1.json

  # 2 creating manifest {sample_id, vtt_path}
  - _target_: sdp.processors.CreateInitialManifestByExtByCsv
    dataset_dir: ${dataset_dir}/subtitles
    csv_file_path: ${dataset_dir}/subsets/${split}.csv
    csv_primary_key: video_id
    extension: ar.vtt
    save_sample_ids: True
    output_manifest_sample_id_key: sample_id
    output_manifest_result_path_key: vtt_file_path
    output_manifest_file: ${workspace_dir}/manifest2.json

  # 3 merging audios manifest with vtts manifest by common key sample_id
  - _target_: sdp.processors.MergeTwoManifestsByKey
    key: sample_id
    input_manifest_file2: ${workspace_dir}/manifest1.json
    output_manifest_file: ${workspace_dir}/manifest3.json

  # 4 removing unnecessary fields
  - _target_: sdp.processors.KeepOnlySpecifiedFields
    fields_to_keep: ["sample_id", "audio_file_path", "vtt_file_path"]
    output_manifest_file: ${workspace_dir}/manifest4.json

  # 5 calculating durations
  - _target_: sdp.processors.GetAudioDuration
    audio_file_key: audio_file_path
    duration_key: audio_duration
    output_manifest_file: ${workspace_dir}/manifest5.json

  # 6 removing negative durations
  - _target_: sdp.processors.PreserveByValue
    input_value_key: audio_duration
    target_value: 0
    operator: gt
    output_manifest_file: ${workspace_dir}/manifest6.json

  # 7 splitting by vtt
  # TODO: check if splitting by vtt sentences works better
  - _target_: sdp.processors.datasets.commoncrawl.SplitByVtt
    source_audio_key: audio_file_path
    caption_file_key: vtt_file_path
    output_text_key: splitted_vtt_text
    output_manifest_file:
      ${workspace_dir}/manifest7.json


  # 8 Aggregating segments
  - _target_: sdp.processors.datasets.youtube.AggregateSegments
    # sample_id: sample_id
    source_audio_key: audio_file_path
    max_duration: ${max_duration}
    output_segments_audio_dir: ${workspace_dir}/wav_segments
    output_manifest_file: ${workspace_dir}/manifest8.json

  # 9 Dropping too short and too long segments
  - _target_: sdp.processors.DropHighLowDuration
    high_duration_threshold: ${max_duration}
    low_duration_threshold: ${min_duration}
    output_manifest_file: ${workspace_dir}/manifest9.json

  # 10 removing unnecessary fields
  - _target_: sdp.processors.KeepOnlySpecifiedFields
    fields_to_keep: ["audio_filepath", "duration", "orig_text"]
    output_manifest_file: ${workspace_dir}/manifest10.json

  # 11 renaming fields accordingly
  - _target_: sdp.processors.RenameFields
    rename_fields: { "orig_text": "text" }
    output_manifest_file: ${workspace_dir}/manifest11.json