# no punctuation, no tatweel, no diacritics, no dotted letters
# python main.py --config-path="dataset_configs/arabic/youtube/" --config-name="configv0_filter.yaml"

processors_to_run: "21:"

split: noisy_train # specify dataset type (clean_train, clean_test, ...)
dataset_dir: /home/lgrigoryan/datasets/arab/
workspace_dir: /home/lgrigoryan/prog/asr_commonvoice_finetuning/NeMo-speech-data-processor/workdir/filtered_train_masc/${split}

min_duration: 1 # minimal duration of the segment
max_duration: 20.0 # maximal duration of the segment
min_wordrate: 0.8 # minimal wordrate
max_wordrate: 3.0 # maximal wordrate

model_path: /home/lgrigoryan/models/no_diacr_normalized_masc_mcv_fleurs/arabic-asr-no-diacr-normalized--ngc-bs16xg8xn1xga8--32.nemo

processors:
  # 0 creating manifest {sample_id, audio_path}
  - _target_: sdp.processors.CreateInitialManifestByExtByCsv
    dataset_dir: ${dataset_dir}/audios
    csv_file_path: ${dataset_dir}/subsets/${split}.csv
    csv_primary_key: video_id
    extension: wav
    save_sample_ids: True
    output_manifest_sample_id_key: sample_id
    output_manifest_result_path_key: raw_audio_file_path
    output_manifest_file: ${workspace_dir}/manifest0.json

  # 1 resampling audios to the same sample rate
  - _target_: sdp.processors.FfmpegConvert
    resampled_audio_dir: ${workspace_dir}/wav
    target_samplerate: 16000
    target_nchannels: 1
    input_file_key: raw_audio_file_path
    output_file_key: audio_file_path
    output_manifest_file: ${workspace_dir}/manifest1.json

  # 2 creating manifest {sample_id, vtt_path}
  - _target_: sdp.processors.CreateInitialManifestByExtByCsv
    dataset_dir: ${dataset_dir}/subtitles
    csv_file_path: ${dataset_dir}/subsets/${split}.csv
    csv_primary_key: video_id
    extension: ar.vtt
    save_sample_ids: True
    output_manifest_sample_id_key: sample_id
    output_manifest_result_path_key: vtt_file_path
    output_manifest_file: ${workspace_dir}/manifest2.json

  # 3 merging audios manifest with vtts manifest by common key sample_id
  - _target_: sdp.processors.MergeTwoManifestsByKey
    key: sample_id
    input_manifest_file2: ${workspace_dir}/manifest1.json
    output_manifest_file: ${workspace_dir}/manifest3.json

  # 4 removing unnecessary fields
  - _target_: sdp.processors.KeepOnlySpecifiedFields
    fields_to_keep: ["sample_id", "audio_file_path", "vtt_file_path"]
    output_manifest_file: ${workspace_dir}/manifest4.json

  # 5 calculating durations
  - _target_: sdp.processors.GetAudioDuration
    audio_file_key: audio_file_path
    duration_key: audio_duration
    output_manifest_file: ${workspace_dir}/manifest5.json

  # 6 removing negative durations
  - _target_: sdp.processors.PreserveByValue
    input_value_key: audio_duration
    target_value: 0
    operator: gt
    output_manifest_file: ${workspace_dir}/manifest6.json

  #TODO: remove numeration from vtts!!!!!!!!!!!
  # 7 removing numeration from vtt files
  - _target_: sdp.processors.FilterVttText
    regex_params: { "pattern": '^\s*\d+\]', "repl": "" }
    input_filepath_key: vtt_file_path
    output_filtered_vtt_dir: ${workspace_dir}/filtered_vtt
    output_filepath_key: filtered_vtt_file_path
    output_manifest_file: ${workspace_dir}/manifest7.json

  # 8 splitting by vtt
  # TODO: check if splitting by vtt sentences works better
  - _target_: sdp.processors.datasets.commoncrawl.SplitByVtt
    source_audio_key: audio_file_path
    caption_file_key: filtered_vtt_file_path
    output_text_key: splitted_vtt_text
    output_manifest_file: ${workspace_dir}/manifest8.json

  # 9 Aggregating segments
  - _target_: sdp.processors.datasets.youtube.AggregateSegments
    source_audio_key: audio_file_path
    max_duration: ${max_duration}
    output_segments_audio_dir: ${workspace_dir}/wav_segments
    output_manifest_file: ${workspace_dir}/manifest9.json

  # 10 removing unnecessary fields
  - _target_: sdp.processors.KeepOnlySpecifiedFields
    fields_to_keep: ["segment_id", "audio_filepath", "duration", "orig_text"]
    output_manifest_file: ${workspace_dir}/manifest10.json

  # 11 removing samples with empty subtitles for exmaple id=2M6vs0L7Xg0
  - _target_: sdp.processors.PreserveByValue
    input_value_key: orig_text
    target_value: ""
    operator: ne
    output_manifest_file: ${workspace_dir}/manifest11.json

  # 12 Dropping too short and too long segments
  - _target_: sdp.processors.DropHighLowDuration
    high_duration_threshold: ${max_duration}
    low_duration_threshold: ${min_duration}
    duration_key: duration
    output_manifest_file: ${workspace_dir}/manifest12.json

  # 13 renaming fields accordingly
  - _target_: sdp.processors.RenameFields
    rename_fields: { "orig_text": "text" }
    output_manifest_file: ${workspace_dir}/manifest13.json

  # 14 normalizing arabic numbers
  - _target_: sdp.processors.NormalizeNumbers
    input_text_key: "text"
    output_text_key: "text"
    output_manifest_file: ${workspace_dir}/manifest14.json

  # 15 removing high low wordrate samples
  - _target_: sdp.processors.DropHighLowWordrate
    text_key: text
    high_wordrate_threshold: ${max_wordrate}
    low_wordrate_threshold: ${min_wordrate}
    output_manifest_file: ${workspace_dir}/manifest15.json

  # 16 replacing punctuation marks
  - _target_: sdp.processors.SubRegex
    text_key: text
    regex_params_list:
      - { "pattern": "&lrm;", "repl": "" }
      - { "pattern": "&rlm;", "repl": "" }
      - { "pattern": "&nbsp", "repl": " " }
      - { "pattern": "'", "repl": "" }
      - { "pattern": "’", "repl": "" }
      - { "pattern": "‘", "repl": "" }
      - { "pattern": "’", "repl": "" }
      - { "pattern": "‘", "repl": "" }
      - { "pattern": "٬", "repl": "" }
      - { "pattern": '"', "repl": "" }
      - { "pattern": "…", "repl": " " }
      - { "pattern": "«", "repl": " " }
      - { "pattern": "»", "repl": " " }
      - { "pattern": "“", "repl": " " }
      - { "pattern": "”", "repl": " " }
      - { "pattern": "☭", "repl": "" }
      - { "pattern": "•", "repl": "" }
      - { "pattern": "\\s+", "repl": " " }
      - { "pattern": "\\[\\.\\]+", "repl": "." }
      - { "pattern": "\\.{2,}", "repl": "." }
      - { "pattern": "!{2,}", "repl": "!" }
      - { "pattern": "؟{2,}", "repl": "؟" }
      - { "pattern": "\u0670", "repl": "" } # removing small alif
      - { "pattern": "\u06CC", "repl": "\u064A" } # replacing arabic letter farsi yeh with yeh
      - { "pattern": "\u06A9", "repl": "\u063A" } # replacing arabic letter keheh yeh with kaf
    output_manifest_file: ${workspace_dir}/manifest16.json
    test_cases:
      - {input: {text: "..."}, output: {text: "."}}
      - {input: {text: "test..."}, output: {text: "test."}}

  # 17 replacing english punctuation marks with arabic ones
  - _target_: sdp.processors.SubRegex
    text_key: text
    regex_params_list:
      - { "pattern": ",", "repl": "،" }
      - { "pattern": "-", "repl": " " }
      - { "pattern": "؛", "repl": " " }
      - { "pattern": ";", "repl": " " }
      - { "pattern": " ،", "repl": "،" }
      - { "pattern": " \\.", "repl": "." }
      - { "pattern": " ؟", "repl": "؟" }
      - { "pattern": " :", "repl": ":" }
      - { "pattern": " !", "repl": "!" }
      - { "pattern": "\\s+", "repl": " " }
      - { "pattern": "\\.{2,}", "repl": "." }
      - { "pattern": "!{2,}", "repl": "!" }
      - { "pattern": "؟{2,}", "repl": "؟" }
    output_manifest_file: ${workspace_dir}/manifest17.json
    test_cases:
      - {input: {text: "..."}, output: {text: "."}}
      - {input: {text: "test..."}, output: {text: "test."}}

  # 18 removing punctuation, diacritics, dotted letters and tatweel
  - _target_: sdp.processors.ArabicTextPreprocessor
    input_text_key: text
    remove_diacritics: True
    remove_punctuation: True
    normalize_dots: False
    remove_tatweel: True
    pyarabic_normalize: True
    reduce_diacritics: False
    apply_compatability_decomposition: False
    output_manifest_file: ${workspace_dir}/manifest18.json

  # 19 dropping non alphabetical symbols
  - _target_: sdp.processors.DropNonAlphabet
    alphabet: " \u0631\u0630\u062F\u062E\u062D\u062C\u062B\u062A\u0629\u0628\u0627\u0626\u0625\u0624\u0623\u0622\u0621\u064A\u0649\u0648\u0647\u0646\u0645\u0644\u0643\u0642\u0641\u063A\u0639\u0638\u0637\u0636\u0635\u0634\u0633\u0632\u064B\u064C\u064D\u064E\u064F\u0650\u0651\u0652"
    # alphabet: ":،.!؟  \u0631\u0630\u062F\u062E\u062D\u062C\u062B\u062A\u0629\u0628\u0627\u0626\u0625\u0624\u0623\u0622\u0621\u064A\u0649\u0648\u0647\u0646\u0645\u0644\u0643\u0642\u0641\u063A\u0639\u0638\u0637\u0636\u0635\u0634\u0633\u0632\u064B\u064C\u064D\u064E\u064F\u0650\u0651\u0652"
    output_manifest_file: ${workspace_dir}/manifest_final.json

  # 20 asr inference on train data
  - _target_: sdp.processors.ASRInferenceParallel
    output_manifest_file: ${workspace_dir}/manifest_inference.json
    pretrained_model: ${model_path}
    batch_size: 16

  # 21
  - _target_: sdp.processors.DropHighWER
    output_manifest_file: ${workspace_dir}/manifest19.json
    text_key: text
    pred_text_key: pred_text
    wer_threshold: 60

  # 22
  - _target_: sdp.processors.DropHighCER
    output_manifest_file: ${workspace_dir}/manifest20.json
    text_key: text
    pred_text_key: pred_text
    cer_threshold: 30

  # 23 removing unnecessary fields
  - _target_: sdp.processors.KeepOnlySpecifiedFields
    fields_to_keep: ["audio_filepath"]
    output_manifest_file: ${workspace_dir}/manifest21.json

  # 24 removing punctuation, diacritics, dotted letters and tatweel
  - _target_: sdp.processors.ArabicTextPreprocessor
    input_text_key: text
    remove_diacritics: True
    remove_punctuation: False
    normalize_dots: False
    remove_tatweel: True
    pyarabic_normalize: True
    reduce_diacritics: False
    input_manifest_file: ${workspace_dir}/manifest17.json
    output_manifest_file: ${workspace_dir}/manifest22.json

  # 25 dropping non alphabetical symbols
  - _target_: sdp.processors.DropNonAlphabet
    # alphabet: " \u0631\u0630\u062F\u062E\u062D\u062C\u062B\u062A\u0629\u0628\u0627\u0626\u0625\u0624\u0623\u0622\u0621\u064A\u0649\u0648\u0647\u0646\u0645\u0644\u0643\u0642\u0641\u063A\u0639\u0638\u0637\u0636\u0635\u0634\u0633\u0632\u064B\u064C\u064D\u064E\u064F\u0650\u0651\u0652"
    alphabet: ":،.!؟  \u0631\u0630\u062F\u062E\u062D\u062C\u062B\u062A\u0629\u0628\u0627\u0626\u0625\u0624\u0623\u0622\u0621\u064A\u0649\u0648\u0647\u0646\u0645\u0644\u0643\u0642\u0641\u063A\u0639\u0638\u0637\u0636\u0635\u0634\u0633\u0632\u064B\u064C\u064D\u064E\u064F\u0650\u0651\u0652"
    output_manifest_file: ${workspace_dir}/manifest23.json

  # 26 keeping only low WER and CER smaples from input noisy dataset
  - _target_: sdp.processors.KeepCommon
    input_manifest_key1: audio_filepath
    input_manifest_key2: audio_filepath
    input_manifest_file2: ${workspace_dir}/manifest21.json
    output_manifest_file: ${workspace_dir}/manifest24.json
