# python main.py --config-path="dataset_configs/arabic/youtube/" --config-name="configv1.yaml"

processors_to_run: "0:"

split: clean_dev # specify dataset type (clean_train, clean_test, ...)
dataset_dir: /home/lgrigoryan/datasets/arab/
workspace_dir: /home/lgrigoryan/prog/asr_commonvoice_finetuning/NeMo-speech-data-processor/workdir/v1/${split}

min_duration: 0.1 # minimal duration of the segment
max_duration: 40.0 # maximal duration of the segment

processors:
  # 0 creating manifest {sample_id, audio_path}
  - _target_: sdp.processors.CreateInitialManifestByExtByCsv
    dataset_dir: ${dataset_dir}/audios
    csv_file_path: ${dataset_dir}/subsets/${split}.csv
    csv_primary_key: video_id
    extension: wav
    save_sample_ids: True
    output_manifest_sample_id_key: sample_id
    output_manifest_result_path_key: raw_audio_file_path
    output_manifest_file: ${workspace_dir}/manifest0.json

  # 1 resampling audios to the same sample rate
  - _target_: sdp.processors.FfmpegConvert
    resampled_audio_dir: ${workspace_dir}/wav
    target_samplerate: 16000
    target_nchannels: 1
    input_file_key: raw_audio_file_path
    output_file_key: audio_file_path
    output_manifest_file: ${workspace_dir}/manifest1.json

  # 2 creating manifest {sample_id, vtt_path}
  - _target_: sdp.processors.CreateInitialManifestByExtByCsv
    dataset_dir: ${dataset_dir}/subtitles
    csv_file_path: ${dataset_dir}/subsets/${split}.csv
    csv_primary_key: video_id
    extension: ar.vtt
    save_sample_ids: True
    output_manifest_sample_id_key: sample_id
    output_manifest_result_path_key: vtt_file_path
    output_manifest_file: ${workspace_dir}/manifest2.json

  # 3 merging audios manifest with vtts manifest by common key sample_id
  - _target_: sdp.processors.MergeTwoManifestsByKey
    key: sample_id
    input_manifest_file2: ${workspace_dir}/manifest1.json
    output_manifest_file: ${workspace_dir}/manifest3.json

  # 4 removing unnecessary fields
  - _target_: sdp.processors.KeepOnlySpecifiedFields
    fields_to_keep: ["sample_id", "audio_file_path", "vtt_file_path"]
    output_manifest_file: ${workspace_dir}/manifest4.json

  # 5 calculating durations
  - _target_: sdp.processors.GetAudioDuration
    audio_file_key: audio_file_path
    duration_key: audio_duration
    output_manifest_file: ${workspace_dir}/manifest5.json

  # 6 removing negative durations
  - _target_: sdp.processors.PreserveByValue
    input_value_key: audio_duration
    target_value: 0
    operator: gt
    output_manifest_file: ${workspace_dir}/manifest6.json

  #TODO: remove numeration from vtts!!!!!!!!!!!
  # 7 removing numeration from vtt files
  - _target_: sdp.processors.FilterVttText
    regex_params: { "pattern": '^\s*\d+\]', "repl": "" }
    input_filepath_key: vtt_file_path
    output_filtered_vtt_dir: ${workspace_dir}/filtered_vtt
    output_filepath_key: filtered_vtt_file_path
    output_manifest_file: ${workspace_dir}/manifest7.json

  # 8 splitting by vtt
  # TODO: check if splitting by vtt sentences works better
  - _target_: sdp.processors.datasets.commoncrawl.SplitByVttSentence
    splited_audio_dir: ${workspace_dir}/wav_sentence
    source_audio_key: audio_file_path
    caption_file_key: filtered_vtt_file_path
    duration_key: audio_duration
    duration_threshold: 10.0
    text_key: text
    target_audio_key: audio_file_path
    proxy_keys: [sample_id]
    output_manifest_file: ${workspace_dir}/manifest8.json

  # 9 removing samples with empty subtitles for exmaple id=2M6vs0L7Xg0
  - _target_: sdp.processors.PreserveByValue
    input_value_key: text
    target_value: ""
    operator: ne
    output_manifest_file: ${workspace_dir}/manifest9.json

  # 10 validating brackets
  - _target_: sdp.processors.ValidateBrackets
    input_manifest_text_key: "text"
    output_manifest_file: ${workspace_dir}/manifest10.json
    test_cases:
      - {
          input: { text: "test тест [sdfsdfsd]" },
          output: { text: "test тест [sdfsdfsd]", is_valid: True },
        }
      - {
          input: { text: "test [{()}][{[]}]" },
          output: { text: "test [{()}][{[]}]", is_valid: True },
        }
      - {
          input: { text: "[[[[ test [ тест]]]]]" },
          output: { text: "[[[[ test [ тест]]]]]", is_valid: True },
        }
      - {
          input: { text: "test тест ]sdfsdfsd[]" },
          output: { text: "test тест ]sdfsdfsd[]", is_valid: False },
        }
      - {
          input: { text: "1] test [{()}[]]{[]}]" },
          output: { text: "1] test [{()}[]]{[]}]", is_valid: False },
        }
      - {
          input: { text: "test тест ]" },
          output: { text: "test тест ]", is_valid: False },
        }
      - {
          input: { text: "test ] тест ]" },
          output: { text: "test ] тест ]", is_valid: False },
        }
      - {
          input: { text: "test [ тест" },
          output: { text: "test [ тест", is_valid: False },
        }
      - {
          input: { text: "]test  тест[" },
          output: { text: "]test  тест[", is_valid: False },
        }
      - {
          input: { text: "[امتحان]" },
          output: { text: "[امتحان]", is_valid: True },
        }

  # 11 validating brackets
  - _target_: sdp.processors.PreserveByValue
    input_value_key: is_valid
    target_value: true
    operator: eq
    output_manifest_file: ${workspace_dir}/manifest11.json

  # 12 Dropping too short and too long segments
  - _target_: sdp.processors.DropHighLowDuration
    high_duration_threshold: ${max_duration}
    low_duration_threshold: ${min_duration}
    duration_key: audio_duration
    output_manifest_file: ${workspace_dir}/manifest12.json

  # 13 removing unnecessary fields
  - _target_: sdp.processors.KeepOnlySpecifiedFields
    fields_to_keep: ["audio_file_path", "audio_duration", "text"]
    output_manifest_file: ${workspace_dir}/manifest13.json

  # 14 renaming fields accordingly
  - _target_: sdp.processors.RenameFields
    rename_fields:
      { "audio_file_path": "audio_filepath", "audio_duration": "duration" }
    output_manifest_file: ${workspace_dir}/manifest14.json

  # 15 replacing punctuation marks
  - _target_: sdp.processors.SubRegex
    output_manifest_file: ${workspace_dir}/manifest15.json
    text_key: text
    regex_params_list:
      - { "pattern": "\\[(.*?)\\]", "repl": "\\1" }
      - { "pattern": "\\((.*?)\\)", "repl": "\\1" }
      - { "pattern": "\\{(.*?)\\}", "repl": "\\1" }
      - { "pattern": "\\[", "repl": " " }
      - { "pattern": "\\]", "repl": " " }
      - { "pattern": "\\{", "repl": " " }
      - { "pattern": "\\}", "repl": " " }
      - { "pattern": "\\(", "repl": " " }
      - { "pattern": "\\)", "repl": " " }
      - { "pattern": "&lrm;", "repl": "" }
      - { "pattern": "&rlm;", "repl": "" }
      - { "pattern": ":", "repl": "," }
      - { "pattern": ";", "repl": "," }
      - { "pattern": "…", "repl": "." }
      - { "pattern": "…", "repl": "." }
      - { "pattern": "!", "repl": "." }
      - { "pattern": "«", "repl": '"' }
      - { "pattern": "»", "repl": '"' }
      - { "pattern": "“", "repl": '"' }
      - { "pattern": "”", "repl": '"' }
      - {"pattern": "\\s+", "repl": " "}
      - {"pattern": "\\[.\\]+", "repl": "."}
    test_cases:
      - {
          input: { text: "(text text text)" },
          output: { text: "text text text" },
        }
      - {
          input: { text: "( text text text )" },
          output: { text: "text text text" },
        }
      - {
          input: { text: "[text text text]" },
          output: { text: "text text text" },
        }
      - {
          input: { text: "[ text text text ]" },
          output: { text: "text text text" },
        }
      - {
          input: { text: "{text text text}" },
          output: { text: "text text text" },
        }
      - {
          input: { text: "{ text text text }" },
          output: { text: "text text text" },
        }
      - {
          input:
            {
              text: "الله سميع ، بصير ، [ وَجَاءَ رَبُّكَ يَدُ اللَّهِ فَوْقَ أَيْدِيهِمْ ، كيف نفسر هذه الآيات ؟ ]",
            },
          output:
            {
              text: "الله سميع ، بصير ، وَجَاءَ رَبُّكَ يَدُ اللَّهِ فَوْقَ أَيْدِيهِمْ ، كيف نفسر هذه الآيات ؟",
            },
        }

  # 16 dropping non alphabetical symbols
  - _target_: sdp.processors.DropNonAlphabet
    alphabet: " \"?., \u0600\u0601\u0602\u0603\u0604\u0605\u0606\u0607\u0608\u0609\u060a\u060b\u060c\u060d\u060e\u060f\u0610\u0611\u0612\u0613\u0614\u0615\u0616\u0617\u0618\u0619\u061a\u061b\u061c\u061d\u061e\u061f\u0620\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062a\u062b\u062c\u062d\u062e\u062f\u0630\u0631\u0632\u0633\u0634\u0635\u0636\u0637\u0638\u0639\u063a\u063b\u063c\u063d\u063e\u063f\u0640\u0641\u0642\u0643\u0644\u0645\u0646\u0647\u0648\u0649\u064a\u064b\u064c\u064d\u064e\u064f\u0650\u0651\u0652\u0653\u0654\u0655\u0656\u0657\u0658\u0659\u065a\u065b\u065c\u065d\u065e\u065f\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\u066a\u066b\u066c\u066d\u066e\u066f\u0670\u0671\u0672\u0673\u0674\u0675\u0676\u0677\u0678\u0679\u067a\u067b\u067c\u067d\u067e\u067f\u0680\u0681\u0682\u0683\u0684\u0685\u0686\u0687\u0688\u0689\u068a\u068b\u068c\u068d\u068e\u068f\u0690\u0691\u0692\u0693\u0694\u0695\u0696\u0697\u0698\u0699\u069a\u069b\u069c\u069d\u069e\u069f\u06a0\u06a1\u06a2\u06a3\u06a4\u06a5\u06a6\u06a7\u06a8\u06a9\u06aa\u06ab\u06ac\u06ad\u06ae\u06af\u06b0\u06b1\u06b2\u06b3\u06b4\u06b5\u06b6\u06b7\u06b8\u06b9\u06ba\u06bb\u06bc\u06bd\u06be\u06bf\u06c0\u06c1\u06c2\u06c3\u06c4\u06c5\u06c6\u06c7\u06c8\u06c9\u06ca\u06cb\u06cc\u06cd\u06ce\u06cf\u06d0\u06d1\u06d2\u06d3\u06d4\u06d5\u06d6\u06d7\u06d8\u06d9\u06da\u06db\u06dc\u06dd\u06de\u06df\u06e0\u06e1\u06e2\u06e3\u06e4\u06e5\u06e6\u06e7\u06e8\u06e9\u06ea\u06eb\u06ec\u06ed\u06ee\u06ef\u06f0\u06f1\u06f2\u06f3\u06f4\u06f5\u06f6\u06f7\u06f8\u06f9\u06fa\u06fb\u06fc\u06fd\u06fe\u06ff"
    output_manifest_file: ${workspace_dir}/manifest16.json
    test_cases:
      - {input: {text: "test тест 测试"}, output: null}
      - {input: {text: "test"}, output: {text: "test"}}